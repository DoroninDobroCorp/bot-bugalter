from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.types import ParseMode

from bot.keyboards import *
from bot.utils import *
from bot.states import *
from data.statistic import *


async def start(message: types.Message):
    hello_text = f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name} üëã"

    if await is_admin(message.from_user.id):
        await message.answer(hello_text,
                             reply_markup=main_menu_keyboard)
        return
    if await if_user_employee(message.from_user.id):
        await message.answer(hello_text,
                             reply_markup=employee_main_menu_keyboard)
        return
    if await if_user_pending(message.from_user.id):
        await message.answer(
            f"{hello_text}\n–ù–µ –Ω—É–∂–Ω–æ, –≤—ã —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ –æ–∂–∏–¥–∞–Ω–∏—è")
        return

    await message.answer(hello_text)

    # –°–æ—Ö—Ä–∞–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    ans = await add_user_to_pending(message.from_user.id,
                                    message.from_user.full_name,
                                    message.from_user.username)
    if ans:
        await message.answer("–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞–Ω–∏—è!")
    else:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ —á—É–¥–æ–≤–∏—â–Ω–∞—è –æ—à–∏–±–∫–∞üò≠")


@employee_required
async def get_balance_info(message: types.Message):
    employee = await get_employee(message.from_user.id)
    if not employee:
        await message.answer("–í—ã –Ω–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫")
        return
    empl_balance = await employee.get_balance()
    await message.answer(f"–í–∞—à–∞ –∑–∞—Ä–ø–ª–∞—Ç–∞: {round(empl_balance, 1)}")


@employee_required
async def get_reports_history(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏ –ø–µ—Ä–∏–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì-–î–î.–ú–ú.–ì–ì–ì–ì",
                         reply_markup=cancel_period_employee_process_keyboard)
    await UserStates.waiting_for_period.set()


@employee_required
async def watch_reports(message: types.Message, state: FSMContext):
    period = message.text

    try:
        start_date, end_date = period.split("-")
        start_date = datetime.strptime(start_date, "%d.%m.%Y").date()
        end_date = datetime.strptime(end_date, "%d.%m.%Y").date()
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã")
        return
    employee_id = message.from_user.id
    reports = await get_reports_by_period_and_employee(start_date, end_date,
                                                       employee_id)
    if reports:
        keyboard = await format_report_stats(reports)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á–µ—Ç", reply_markup=keyboard)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:")
        await UserStates.waiting_for_report_number.set()
    else:
        await message.answer("–ù–µ—Ç –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞.")
        await state.finish()


@employee_required
async def go_to_main_menu(message: types.Message):
	await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                         reply_markup=employee_main_menu_keyboard)


@employee_required
async def cancel_employee_period_process(call: types.CallbackQuery,
                                         state: FSMContext):
    await call.answer()

    await call.message.answer("–í–≤–µ–¥–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
                              reply_markup=employee_main_menu_keyboard)
    await state.finish()


@employee_required
async def show_report_details(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    try:
        report_number = int(call.data.split("_|_")[1])
        report = await get_report_by_id(report_number)
        if report:
            output = await format_report_details(report)
            await call.message.answer(output)
        else:
            await call.message.answer("–û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except ValueError:
        await call.message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –æ—Ç—á–µ—Ç–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    finally:
        await state.finish()


@employee_required
async def link_to_check_reports(message: types.Message):
    access_token = await get_token(message.from_user.id)
    await message.answer(
        f"[–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—á—ë—Ç–æ–≤ \(—Å—Å—ã–ª–∫–∞\)](https://ibet.team:6201/login?token={access_token}&to=0)",
        reply_markup=employee_main_menu_keyboard,
        parse_mode=ParseMode.MARKDOWN_V2
    )


def register_user_handlers(dp):
    dp.register_callback_query_handler(cancel_employee_period_process,
                                       lambda
                                           c: c.data == "cancel_employee_period_process",
                                       state="*")
    dp.register_message_handler(go_to_main_menu, lambda
        message: message.text == "–û—Ç–º–µ–Ω–∞", state="*")
    dp.register_message_handler(start, Command("start"))
    dp.register_message_handler(get_reports_history, lambda
        message: message.text == "üìù –ú–æ–∏ –æ—Ç—á–µ—Ç—ã", state="*")
    dp.register_message_handler(watch_reports,
                                state=UserStates.waiting_for_period)
    dp.register_message_handler(get_balance_info, lambda
        message: message.text == "üìä –ú–æ—è –∑–∞—Ä–ø–ª–∞—Ç–∞", state="*")
    dp.register_callback_query_handler(show_report_details,
                                       lambda call: call.data.startswith(
                                           "report_details_"))
    dp.register_message_handler(link_to_check_reports, lambda
        message: message.text == "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç—á—ë—Ç—ã", state="*")
